// /*
// Copyright The Kubernetes Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */
//

// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/azureclients/v2/vmclient/interface.go

// Package mockvmclient is a generated GoMock package.
package mockvmclient

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	retry "sigs.k8s.io/cloud-provider-azure/pkg/retry"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// GetVMNameByComputerName mocks base method.
func (m *MockInterface) GetVMNameByComputerName(ctx context.Context, resourceGroupName, computerName string) (string, *retry.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVMNameByComputerName", ctx, resourceGroupName, computerName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*retry.Error)
	return ret0, ret1
}

// GetVMNameByComputerName indicates an expected call of GetVMNameByComputerName.
func (mr *MockInterfaceMockRecorder) GetVMNameByComputerName(ctx, resourceGroupName, computerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVMNameByComputerName", reflect.TypeOf((*MockInterface)(nil).GetVMNameByComputerName), ctx, resourceGroupName, computerName)
}
